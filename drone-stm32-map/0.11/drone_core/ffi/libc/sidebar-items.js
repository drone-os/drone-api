initSidebarItems({"fn":[["calloc","Allocates memory for an array of `nmemb` elements of `size` bytes each and returns a pointer to the allocated memory. The memory is set to zero. If `nmemb` or `size` is 0, then it returns either `NULL`, or a unique pointer value that can later be successfully passed to `free`."],["free","Frees the memory space pointed to by `ptr`, which must have been returned by a previous call to `malloc`, `calloc`, or `realloc`. Otherwise, or if `free(ptr)` has already been called before, undefined behavior occurs. If `ptr` is `NULL`, no operation is performed."],["malloc","Allocates size bytes and returns a pointer to the allocated memory. The memory is not initialized. If `size` is `0`, then it returns either `NULL`, or a unique pointer value that can later be successfully passed to `free`."],["realloc","Changes the size of the memory block pointed to by `ptr` to `size` bytes. The contents will be unchanged in the range from the start of the region up to the minimum of the old and new sizes. If the new size is larger than the old size, the added memory will not be initialized. If `ptr` is `NULL`, then the call is equivalent to `malloc(size)`, for all values of `size`; if `size` is equal to zero, and `ptr` is not `NULL`, then the call is equivalent to `free(ptr)`. Unless `ptr` is `NULL`, it must have been returned by an earlier call to `malloc`, `calloc`, or `realloc`. If the area pointed to was moved, a `free(ptr)` is done."],["strchr","Returns a pointer to the first occurrence of the character `c` in the string `s`."],["strcmp","Compares the two strings `s1` and `s2`. It returns an integer less than, equal to, or greater than zero if `s1` is found, respectively, to be less than, to match, or be greater than `s2`."],["strlen","Calculates the length of the string `s`, excluding the terminating null byte (`'\\0'`)."]],"type":[["size_t","A type able to represent the size of any object in bytes."]]});