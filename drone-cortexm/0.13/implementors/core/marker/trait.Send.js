(function() {var implementors = {};
implementors["drone_core"] = [{"text":"impl Send for CStr","synthetic":true,"types":[]},{"text":"impl Send for FromBytesWithNulError","synthetic":true,"types":[]},{"text":"impl Send for CString","synthetic":true,"types":[]},{"text":"impl Send for NulError","synthetic":true,"types":[]},{"text":"impl Send for IntoStringError","synthetic":true,"types":[]},{"text":"impl Send for Chain","synthetic":true,"types":[]},{"text":"impl&lt;F, Y, R&gt; Send for FiberFn&lt;F, Y, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for FiberOnce&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FiberFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for FiberGen&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FiberStreamPulse","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TryFiberStreamPulse&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FiberStreamRing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for TryFiberStreamRing&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Y, R&gt; Send for FiberState&lt;Y, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for Pool","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Send for Inventory&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Guard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for GuardToken&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Token&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SeekFrom","synthetic":true,"types":[]},{"text":"impl Send for Port","synthetic":true,"types":[]},{"text":"impl&lt;Cmd, ReqRes&gt; Send for In&lt;Cmd, ReqRes&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cmd: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ReqRes: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Req, CmdRes&gt; Send for Out&lt;Req, CmdRes&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CmdRes: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Urt","synthetic":true,"types":[]},{"text":"impl Send for Srt","synthetic":true,"types":[]},{"text":"impl Send for Crt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Receiver&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sender&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Receiver&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Sender&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendErrorKind","synthetic":true,"types":[]},{"text":"impl Send for PreemptedCell","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; !Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; !Send for RwLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; !Send for RwLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["drone_cortexm"] = [{"text":"impl&lt;I&gt; Send for SysTick&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Send for SysTickDiverged","synthetic":true,"types":[]},{"text":"impl Send for TimerOverflow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TimerSleep&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Send for TimerInterval&lt;'a, T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Sv, I, Y, R&gt; !Send for Yielder&lt;Sv, I, Y, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for FpuPeriph","synthetic":true,"types":[]},{"text":"impl Send for SysTickPeriph","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Cyccnt&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Cp11&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Cp10&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Aspen&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Lspen&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Monrdy&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Bfrdy&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Mmrdy&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Hfrdy&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Thread&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for User&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Lspact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Address&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Ahp&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Dn&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Fz&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Rmode&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Privmask&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Busy&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for TraceBusID&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Gtsfreq&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tsprescale&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Swoena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Txena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Syncena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tsena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Itmena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Unlock&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Iregion&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Dregion&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Separate&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Privdefena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Hfnmiena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Enable&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Region&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Addr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Valid&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Region&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Xn&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Ap&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tex&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for S&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for C&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for B&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Srd&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Size&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Enable&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Implementer&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Variant&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Architecture&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Partno&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Revision&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Nmipendset&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Pendsvset&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Pendsvclr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Pendstset&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Pendstclr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Isrpending&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vectpending&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Rettobase&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vectactive&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tbloff&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vectkey&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Endianess&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Prigroup&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Sysresetreq&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vectclractive&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vectreset&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Seveonpend&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Sleepdeep&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Sleeponexit&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Stkalign&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Bfhfnmign&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Div0Trp&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for UnalignTrp&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Usersetmpend&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Nonbasethrdena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriUsageFault&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriBusFault&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriMemManage&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriSvCall&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriSysTick&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for PriPendSv&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Usgfaultena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Busfaultena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Memfaultena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Svcallpended&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Busfaultpended&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Memfaultpended&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Usgfaultpended&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Systickact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Pendsvact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Monitoract&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Svcallact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Usgfaultact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Busfaultact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Memfaultact&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Mmarvalid&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Mlsperr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Mstkerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Munstkerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Daccviol&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Iaccviol&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Bfarvalid&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Lsperr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Stkerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Unstkerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Impreciserr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Preciserr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Ibuserr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Divbyzero&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Unaligned&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Nocp&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Invpc&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Invstate&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Undefinstr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Debugevt&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Forced&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vecttbl&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for External&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Vcatch&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Dwttrap&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Bkpt&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Halted&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Address&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Address&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Impdef&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Trcena&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for MonReq&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for MonStep&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for MonPend&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for MonEn&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcHarderr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcInterr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcBuserr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcStaterr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcChkerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcNocperr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcMmerr&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for VcCorereset&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Countflag&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Clksource&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tickint&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Enable&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reload&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Current&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Noref&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Skew&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Tenms&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Swoscaler&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Txmode&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Val","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for Reg&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, _T&gt; Send for Hold&lt;'a, _T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for TrigIn&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;_T&gt; Send for EnFCont&lt;_T&gt;","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock0","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock1","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock2","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock3","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock4","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock5","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock6","synthetic":true,"types":[]},{"text":"impl Send for NvicBlock7","synthetic":true,"types":[]},{"text":"impl&lt;Sv, T&gt; Send for Fiber&lt;Sv, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sv: Switch&lt;Data&lt;In&lt;&lt;T as ProcLoop&gt;::Cmd, &lt;T as ProcLoop&gt;::ReqRes&gt;, FiberState&lt;Out&lt;&lt;T as ProcLoop&gt;::Req, &lt;T as ProcLoop&gt;::CmdRes&gt;, !&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ProcLoop&gt;::Cmd: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ProcLoop&gt;::CmdRes: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ProcLoop&gt;::Req: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ProcLoop&gt;::ReqRes: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Sv, T&gt; !Send for Yielder&lt;Sv, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Port","synthetic":true,"types":[]},{"text":"impl Send for ThrInitExtended","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NvicIser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NvicIcer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NvicIspr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NvicIcpr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NvicIabr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StreamRootWait&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Sv, I, Y, R, F&gt; Send for FiberProc&lt;Sv, I, Y, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sv: Switch&lt;Data&lt;I, FiberState&lt;Y, R&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(I, Yielder&lt;Sv, I, Y, R&gt;) -&gt; R,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;Y: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for SwitchContextService","synthetic":false,"types":[]},{"text":"impl Send for SwitchBackService","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, '_&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Send for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Send for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Send for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Send for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Send for AbortHandle","synthetic":true,"types":[]},{"text":"impl Send for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Send for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Send for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Send for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Send for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Send for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Send for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBuffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Send for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Send for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Send for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Send for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Send for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Send for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Send for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Send for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Send&gt; Send for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()